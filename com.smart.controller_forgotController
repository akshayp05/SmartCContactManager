package com.smart.controller;

import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;

import org.springframework.web.bind.annotation.RequestParam;

import com.smart.dao.UserRepository;
import com.smart.models.User;
//import com.smart.services.EmailService;

import jakarta.servlet.http.HttpSession;

@Controller
public class ForgotController {

	Random random = new Random(1000);
	/*
	 * @Autowired private EmailService emailService;
	 */
	@Autowired
	private UserRepository userRepository;
	@Autowired
	private BCryptPasswordEncoder bCryptPasswordEncoder;

	@GetMapping("/forgot")
	public String openEmailForm() {

		return "forgot_email_form";
	}

	@GetMapping("/resetPassword/{id}")
	public String changePassword(@PathVariable int id, Model m) {
		m.addAttribute("id", id);
		return "password_change_form";
	}

	@PostMapping("/forgot")
	public String forgotPassword(@RequestParam String email, @RequestParam String phone, HttpSession session) {
		User user = userRepository.findByEmailAndPhone(email, phone);
		if (user != null) {

			return "redirect:/resetPassword/" + user.getId();
			// return "password_change_form";

		} else {
			session.setAttribute("msg", "invalid moble no and email");
			return "forgot_email_form";
		}

	}
	@PostMapping("/changePassword")
	public String changePassword(@RequestParam String psw,@RequestParam Integer id,HttpSession session) {
		
	User user=userRepository.findById(id).get();
	String encryptpsw=bCryptPasswordEncoder.encode(psw);
	user.setPassword(encryptpsw);
	@SuppressWarnings("unused")
	User upadteUser=userRepository.save(user);
	if (user !=null) {
		session.setAttribute("msg", "password upadte successfully");
	}
		return "redirect:/signIn";
		
	}

}

/*
 * @PostMapping("/send-otp") public String sendOtp(@RequestParam("email") String
 * email,HttpSession session) { System.out.println("email>>>"+email); //generate
 * 4 digit OTP
 * 
 * int otp=random.nextInt(9999); System.out.println("OTP-->>"+otp);
 * 
 * //write code send otp for verify String subject="OTP from AK"; String
 * message="" + "<div>" + "<h1>" +"OTP" + "</h1>" + "</div>"; String to=email;
 * 
 * boolean flag=this.emailService.sendEmail(subject, message, to);
 * 
 * if(flag) { session.setAttribute("myotp", otp); session.setAttribute("email",
 * email); return "verify_otp"; }else{ session.setAttribute("message",
 * "Check your email id..!!"); return "forgot_email_form"; } } //verify otp
 * 
 * @PostMapping("/verify-otp") public String verifyOtp(@RequestParam("otp") int
 * otp,HttpSession session) {
 * 
 * int myOtp=(int) session.getAttribute("myotp"); String email=(String)
 * session.getAttribute("email"); if(myOtp==otp) { //password change form User
 * user=this.userRepository.getUserByUserName(email); if (user==null) { //
 * session.setAttribute("message", "You have enterd wrong otp"); return
 * "verify_otp"; } else { //change password } return "password_change_form";
 * 
 * }else { // session.setAttribute("message", "You have enterd wrong otp");
 * return "verify_otp"; }
 * 
 * } //change password
 * 
 * @PostMapping("/change-password") public String
 * changePassword(@RequestParam("newpassword") String newpassword,HttpSession
 * session) {
 * 
 * String email=(String) session.getAttribute("email"); User
 * user=this.userRepository.getUserByUserName(email);
 * user.setPassword(this.bCryptPasswordEncoder.encode(newpassword));
 * this.userRepository.save(user); return "redirect/signIn";
 * 
 * 
 * } }
 */
