package com.smart.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.smart.dao.UserRepository;
import com.smart.helper.Message;
import com.smart.models.User;

import jakarta.servlet.http.HttpSession;
import jakarta.validation.Valid;

@Controller
public class HomeController {

	@Autowired
	private BCryptPasswordEncoder passwordEncoder;

	@Autowired
	private UserRepository userRepository;

	@RequestMapping("/")
	public String home(Model model) {
		model.addAttribute("title", "home-smart contct");

		return "home";
	}

	@RequestMapping("/about")
	public String about(Model model) {
		model.addAttribute("title", "about-smart contct");

		return "about";
	}

	@RequestMapping("/signup")
	public String signup(Model model) {
		model.addAttribute("title", "signup-smart contct");
		model.addAttribute("user", new User());
		return "signup";
	}

	// this handler for register user
	@RequestMapping(value = "/do_register", method = RequestMethod.POST)
	public String registerUser(@Valid @ModelAttribute("user") User user, BindingResult result1,
			@RequestParam(value = "agreement", defaultValue = "false") boolean agreement, Model model,
			HttpSession session) {
		try {
			if (!agreement) {
				System.out.println("your not agreed terms and condition");
				throw new Exception("You not agread term and conditions");
			}
			if (result1.hasErrors()) {
				model.addAttribute("user", user);
				return "signup";
			}
			System.out.println("agreement" + agreement);
			System.out.println("user" + user);
			user.setRole("ROLE_USER");
			user.setEnabled(true);
			user.setImageUrl("default.png");
			user.setPassword(passwordEncoder.encode(user.getPassword()));
			System.out.println("passwordEncoder>>>>>>>>>" + passwordEncoder);
			System.out.println("user.getPassword()>>>>>>>>>" + user.getPassword());
			@SuppressWarnings("unused")
			User result = this.userRepository.save(user);
			model.addAttribute("user", new User());
			// session.setAttribute("message", new Message("successfully register..!",
			// "alert-success"));
			session.setAttribute("message", new Message("successfully register..!", "alert-succsess"));
			return "signup";
		} catch (Exception e) {
			e.printStackTrace();
			model.addAttribute("user", user);
			// session.setAttribute("message", new Message( "something went wrong..!"+
			// e.getMessage(), "alert-danger"));
			session.setAttribute("message", new Message("something went wrong..!" + e.getMessage(), "alert-danger"));
			return "signup";
		}

	}

	@GetMapping("/signIn")
	public String customeLogin(Model model) {
		model.addAttribute("title", "Login page");
		return "login";
	}
}
