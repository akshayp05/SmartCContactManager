package com.smart.controller;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.security.Principal;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.smart.dao.ContactRepository;
import com.smart.dao.UserRepository;
import com.smart.helper.Message;
import com.smart.models.Contact;
import com.smart.models.User;
import jakarta.servlet.http.HttpSession;

@Controller
@RequestMapping("/user")
public class UserController {

	@Autowired
	private UserRepository userRepository;

	@Autowired
	private ContactRepository contactRepository;
	
	@Autowired
	private BCryptPasswordEncoder bCryptPasswordEncoder;

	// This method run for every method index, add_contact or etc.
	// Method for adding common data for response.
	@ModelAttribute
	public void addCommonData(Model model, Principal principal) {
		String userName = principal.getName();
		System.out.println("USER-NAME" + userName);
		User user = userRepository.getUserByUserName(userName);
		System.out.println("USEr>>>" + user);

		model.addAttribute("user", user);
	}

	// dashboard home
	@RequestMapping("/index")
	public String userDashboard(Model model, Principal principal) {
		model.addAttribute("title", "user_dashboard");
		return "normal/user_dashboard";
	}

	// Open add form handler
	@GetMapping("/add-contact")
	public String openAddContactForm(Model model) {
		model.addAttribute("title", "Add Contact");
		model.addAttribute("contact", new Contact());
		return "normal/add_contact_form";
	}

	// process add contact form
	@PostMapping("/process-contact")
	public String processContact(@ModelAttribute Contact contact,
			@RequestParam("processImage") MultipartFile multipartFile, Principal principal, HttpSession session) {

		try {
			String name = principal.getName();
			User user = this.userRepository.getUserByUserName(name);
			// processing and uploading file..
			if (multipartFile.isEmpty()) {
				// if file is empty try your message
				System.out.println("file is empty");
				contact.setImage("default.png");

			} else {
				// file upload in folder
				contact.setImage(multipartFile.getOriginalFilename());
				File savefile = new ClassPathResource("static/img").getFile();

				// java.nio.file.Path path=
				// Paths.get(savefile.getAbsolutePath()+File.separator+file.getOriginalFilename());
				// Files.copy(file.getInputStream(),path,StandardCopyOption.REPLACE_EXISTING);
				Files.copy(multipartFile.getInputStream(),
						Paths.get(savefile.getAbsolutePath() + File.separator + multipartFile.getOriginalFilename()),
						StandardCopyOption.REPLACE_EXISTING);

				System.out.println("image is uploaded");
			}

			user.getContacts().add(contact);
			contact.setUser(user);
			// database svaer line
			this.userRepository.save(user);

			System.out.println("DATA-->>>>>>" + contact);
			System.out.println("added in database");
			// message success.........
			session.setAttribute("message", new Message("your contact is added successfully..! Add more", "success"));

		} catch (Exception e) {
			e.printStackTrace();
			// error message
			session.setAttribute("message", new Message("Some thing went wrong..!! please try again", "danger"));

		}
		return "normal/add_contact_form";
	}

	@GetMapping("/show-contacts/{page}")
	public String showContacts(@PathVariable("page") Integer page, Model model, Principal principal) {
		model.addAttribute("title", "show contact user");
		String userName = principal.getName();
		User user = userRepository.getUserByUserName(userName);
		Pageable pageable = PageRequest.of(page, 3);
		Page<Contact> contacts = this.contactRepository.findContactByUser(user.getId(), pageable);
		model.addAttribute("contacts", contacts);
		model.addAttribute("currentPage", page);
		model.addAttribute("totalPages", contacts.getTotalPages());

		return "normal/show_contacts";
	}

	// view page
	@RequestMapping("/{cId}/contact")
	public String showDetail(@PathVariable("cId") Integer cId, Model m, Principal principal) {
		System.out.println("CID" + cId);

		Optional<Contact> conOptional = contactRepository.findById(cId);
		Contact contact = conOptional.get();

		String userName = principal.getName();
		User user = userRepository.getUserByUserName(userName);
		if (user.getId() == contact.getUser().getId()) {

			m.addAttribute("contact", contact);
			m.addAttribute("title", contact.getName());
		}

		return "normal/contact_detail";
	}

	// delete contact handler
	@GetMapping("/delete/{cId}")
	public String deleteContact(@PathVariable("cId") Integer cId, Model m, HttpSession session,Principal principal) {

		Optional<Contact> contOptional = contactRepository.findById(cId);
		Contact contact = contOptional.get();
	//	contact.setUser(null);
	//	contactRepository.delete(contact);
		User user=this.userRepository.getUserByUserName(principal.getName());
		user.getContacts().remove(contact);
		this.userRepository.save(user);
		
		// pending
		//session.setAttribute("message", new Message("Contact deleted successfully..!!", "success"));
		return "redirect:/user/show-contacts/0";
	}
	// open update form handler

	@PostMapping("/update-contact/{cid}")
	public String updateForm(@PathVariable("cid") Integer cid, Model m) {

		m.addAttribute("title", "update contact");
		Contact contact = contactRepository.findById(cid).get();
		m.addAttribute("contact", contact);
		return "normal/update-form";
	}

	// update contact handler
	@RequestMapping(value = "/process-update", method = RequestMethod.POST)
	public String updateHandler(@ModelAttribute Contact contact, @RequestParam("processImage") MultipartFile file,
			Model m, HttpSession session, Principal principal) {

		try {
			// old contact detatil
			Contact oldContact = this.contactRepository.findById(contact.getcId()).get();

			// image
			if (!file.isEmpty()) {

				// delete old image
				File deletefile = new ClassPathResource("static/img").getFile();
				File file1=new File(deletefile, oldContact.getImage());
				file1.delete();

				// update new image
				File savefile = new ClassPathResource("static/img").getFile();
				Files.copy(file.getInputStream(),
						Paths.get(savefile.getAbsolutePath() + File.separator + file.getOriginalFilename()),
						StandardCopyOption.REPLACE_EXISTING);
				contact.setImage(file.getOriginalFilename());

			} else {
				contact.setImage(oldContact.getImage());
			}
			User user = this.userRepository.getUserByUserName(principal.getName());
			contact.setUser(user);
			this.contactRepository.save(contact);

		} catch (Exception e) {
			e.printStackTrace();
		}

		System.out.println("contact name" + contact.getName());

		return "redirect:/user/" + contact.getcId() + "/contact";
	}
	
	 // Profile handler
    @GetMapping("/profile")
    public String yourProfile(Model model) {

        model.addAttribute("title", "Profile");

        return "normal/profile";
    }
    

    // open setting handler
    @GetMapping("/settings")
    public String openSetting(Model model) {
        model.addAttribute("title", "Settings");
        return "normal/settings";
    }
    
    // change password handler
    @PostMapping("/change-password")
    public String changePassword(Model model, Principal principal, HttpSession session,
                                 @RequestParam("oldPassword") String oldPassword, @RequestParam("newPassword") String newPassword) {

        String username = principal.getName();
        User currentUser = this.userRepository.getUserByUserName(username);

        if (this.bCryptPasswordEncoder.matches(oldPassword, currentUser.getPassword())) {
            currentUser.setPassword(this.bCryptPasswordEncoder.encode(newPassword));
            this.userRepository.save(currentUser);
         //   session.setAttribute("message", new Message("Your password is successfully changed...", "alert-success"));

        } else {
       //     session.setAttribute("message", new Message("Your old password is wrong!!", "alert-danger"));
            return "redirect:/user/settings";
        }

        return "redirect:/user/index";

    }
}
